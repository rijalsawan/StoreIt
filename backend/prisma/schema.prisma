// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Storage and subscription
  storageUsed     BigInt @default(0)
  storageLimit    BigInt @default(524288000) // 500MB default for free users
  subscriptionId  String?
  customerId      String? // Stripe customer ID
  subscription    Subscription?

  // Relations
  files       File[]
  folders     Folder[]
  sharedFiles SharedFile[]
  settings    UserSettings?

  @@map("users")
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String             @unique
  stripeSubId       String             @unique
  status            SubscriptionStatus
  plan              SubscriptionPlan
  currentPeriodEnd  DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model File {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimetype    String
  size        BigInt
  path        String
  folderId    String?
  userId      String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder      Folder?      @relation(fields: [folderId], references: [id], onDelete: SetNull)
  sharedFiles SharedFile[]

  @@map("files")
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  parentId  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("FolderHierarchy")
  files    File[]

  @@map("folders")
}

model SharedFile {
  id        String   @id @default(cuid())
  fileId    String
  userId    String
  token     String   @unique
  expiresAt DateTime?
  createdAt DateTime @default(now())

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shared_files")
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  settings  String   // JSON string containing user settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum SubscriptionPlan {
  FREE
  PRO        // $5/month - 10GB
  PREMIUM    // $15/month - 100GB
}
